# 오퍼레이터: 특정 행위를 할 수 이쓴 기능을 모아 놓은 클래스
# 태스크: 오퍼레이터에서 인스턴스화되어 DAG에서 실행 가능한 오브젝트 / 방향성을 가진다 / 
# Bash 오퍼레이터, Python 오퍼레이터, S3 오퍼레이터, GCS 오퍼레이터 등등 ...

# 태스크 수행 주체
# 스케줄러(뇌, 머리) - 1. DAG 파싱 -> DB에 정보 저장(메타 DB) -> Start 시간 확인 - 워커에게 지시
# 워커 - 1. DAG 파일 처리 - DB에 결과 업데이트 - 워커 컨테이너



# cron 스케줄
# 태스크가 실행되어야 하는 시간을 정하기 위한 5개 필드로 구성된 문자열
# 분, 시, 일, 월, 요일
# * : 모든 값 / 15 2 * * * -> 매일 02시 15분  / 0 일요일 ~ 6 토요일 /
# - : 범위지정 / 0 9-18 * * * -> 매일 9시부터 18시까지 정각마다 1시간마다 / 
# , : 여러 값 지정 / 0 1 1,2,3 * * -> 매월 1일 2일 3일만 1시에 / 
# / : 증가값 지정 / */30 * * * *  -> 30분마다 
# L : 마지막 값 (일, 요일에만 사용가능) / 10 1 L * * -> 매월 마자믹 일 01시 10분
# # : 몇번째 요일인지 지정 / 10 1 * * 6#3 -> 매월 세번째 토요일 01시 10분


# 태스크 연결 방법
# >>, << 사용하기 (Airflow 공식 추천 방식)
# 함수 사용하기
# 복잡한 태스크는 어떻게 연결하는가?
# t1 >> [t2, t3] >> t4 << t5

# 또는 >> 만 이용하고 싶다면,
# t1 >> [t2, t3] >> t4
# t5 >> t4

# 더 복잡하게
# t1 >> [t2, t3] >> t4
# t5 >> t4
# [t4, t7] >> t6 >> t8


# 쉘 스크립트 수행
# Bash Operator로 컨테이너 외부의 쉘 스크립트 수행하기
# 쉘 스크립트: 유닉스, 리눅스 쉘 명령을 이용하여 만들어지고, 인터프리터에 의해 한 줄씩 처리되는 파일
# .sh 확장자를 붙인다.

# 왜 필요한가?
# 1. 쉘 명령어를 이용하여 복잡한 로직을 처리하는 경우
# -> sftp를 통해 파일을 받은 후 DB에 Insert & tar.gz로 압축해두기
# 2. 쉘 명령어 재사용을 위해

# worker 컨테이너가 쉘 스크립트를 수행하려면?
# 문제점
# 1. 컨테이너는 외부의 파일을 인식할 수 없다.
# 2. 컨테이너 안에 파일을 만들어주면 컨테이너 재시작시 파일이 사라진다.

# 해결방법
# volume사용
# docker_compose.yaml 파일의 plugins 에 shell파일을 저장한다.


# Email 오퍼레이터
# 이메일을 전송해주는 오퍼레이터
# 이메일 전송을 위해 사전 세팅 작업 필요

# 구글 설정 작업
# 구글 메일 서버 사용
# 전달 및 POP/IMAP -> IMAP 사용
# 앱 비밀번호 세팅

# 에어플로우 설정 작업

 

